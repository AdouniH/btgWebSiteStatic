{"version":3,"sources":["cmpts/slide.png","logo.svg","cmpts/logo.png","cmpts/nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","props","state","name","lastname","phone","email","message","handleChange","bind","envoie","event","target","value","this","setState","e","preventDefault","valeurs","console","log","class","href","id","src","slide","alt","width","height","frameborder","scrolling","marginheight","marginwidth","onSubmit","for","type","placeholder","onChange","required","data-msg","React","Component","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,mC,4ECA3CD,EAAOC,QAAU,IAA0B,kC,6DCA3CD,EAAOC,QAAU,IAA0B,kC,gMC8F5BC,G,kBAvFT,WAAYC,GAAQ,IAAD,8BACnB,4CAAMA,KACDC,MAAQ,CACTC,KAAM,GACNC,SAAU,GACVC,MAAO,GACPC,MAAO,GACPC,QAAS,IAEb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,OAAS,EAAKA,OAAOD,KAAZ,gBAVK,E,0EAaRE,GACX,IAAIR,EAAOQ,EAAMC,OAAOT,KACpBU,EAAQF,EAAMC,OAAOC,MACzBC,KAAKC,SAAL,eAAgBZ,EAAOU,M,6BAGlBG,GACLA,EAAEC,iBACF,IAAIC,EAAUJ,KAAKZ,MACnBiB,QAAQC,IAAIF,K,+BAIZ,OACE,6BACM,6BACE,wBAAIG,MAAM,OACN,4BAAI,uBAAGC,KAAK,KAAR,sDAGV,yBAAKD,MAAM,UACP,yBAAKA,MAAM,aAEX,yBAAKA,MAAM,aACP,yBAAKA,MAAM,eACP,wBAAIE,GAAG,aAAP,qCAEJ,yBAAKA,GAAG,OAAOC,IAAKC,IAAOC,IAAI,UAC7B,yBAAKH,GAAG,OACJ,yBAAKF,MAAM,YAAW,yBAAKA,MAAM,eAC7B,4BAAQM,MAAM,OACRC,OAAO,MACPL,GAAG,cACHC,IAAI,4IACJK,YAAY,IAAIC,UAAU,KAAKC,aAAa,IAAIC,YAAY,SAK5E,yBAAKX,MAAM,gBACL,0BAAMY,SAAUnB,KAAKJ,QACjB,yBAAKW,MAAM,OACP,2BAAOA,MAAO,cAAca,IAAI,SAAhC,OACA,2BAAOb,MAAO,cAAcc,KAAK,OAAOZ,GAAG,QAAQpB,KAAK,OAAOiC,YAAY,OAAOvB,MAAOC,KAAKZ,MAAMC,KAAMkC,SAAUvB,KAAKN,gBAE7H,yBAAKa,MAAM,OACT,2BAAOA,MAAO,cAAca,IAAI,QAAQI,UAAQ,GAAhD,SACA,2BAAOjB,MAAO,cAAcc,KAAK,MAAMZ,GAAG,QAAQpB,KAAK,QAAQiC,YAAY,sBAAsBvB,MAAOC,KAAKZ,MAAMG,MAAOgC,SAAUvB,KAAKN,gBAG3I,yBAAKa,MAAM,OACT,2BAAOA,MAAO,cAAca,IAAI,SAAhC,SACA,2BAAOb,MAAO,cAAcc,KAAK,QAAQZ,GAAG,QAAQpB,KAAK,QAAQiC,YAAY,cAAcvB,MAAOC,KAAKZ,MAAMI,MAAO+B,SAAUvB,KAAKN,gBAGrI,yBAAKa,MAAM,OACT,2BAAOA,MAAO,cAAca,IAAI,QAAhC,QACA,8BAAUb,MAAM,oBAAoBE,GAAG,MAAMpB,KAAK,UAAWoC,WAAS,gCAAgCH,YAAY,UAAUvB,MAAOC,KAAKZ,MAAMK,QAAS8B,SAAUvB,KAAKN,cAAtK,MAGF,yBAAKa,MAAM,OACT,4BAAQA,MAAM,SAASR,MAAM,WAA7B,iBAKhB,yBAAKQ,MAAM,mB,GAhFXmB,IAAMC,YCkBTC,E,iLAVL,OACE,kBAAC,IAAD,KACI,kBAAC,IAAD,KACM,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAAI,kBAAC,EAAD,a,GAL1BJ,IAAMC,WCAJI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9edfc69e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/slide.56554273.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.798f4849.png\";","import React from 'react';\r\nimport './nav.css';\r\nimport slide from './slide.png';\r\nimport logo from './logo.png';\r\n\r\n\r\nclass Nav extends React.Component {\r\n      constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n          name: \"\",\r\n          lastname: \"\",\r\n          phone: \"\",\r\n          email: \"\",\r\n          message: \"\"\r\n      };\r\n      this.handleChange = this.handleChange.bind(this)\r\n      this.envoie = this.envoie.bind(this)\r\n    }\r\n\r\n    handleChange(event) {\r\n      var name = event.target.name;\r\n      var value = event.target.value;\r\n      this.setState({[name]: value})\r\n    }\r\n\r\n    envoie(e) {\r\n      e.preventDefault();\r\n      var valeurs = this.state;\r\n      console.log(valeurs);\r\n    }\r\n\r\n    render() {\r\n      return(\r\n        <div>\r\n              <div>\r\n                <ul class='nav'>\r\n                    <li><a href=\"/\">Contactez le Geometre Expert : (+216) 98619055 </a></li>\r\n                </ul>\r\n              </div>\r\n              <div class='second'>\r\n                  <div class='leftside'>\r\n                  </div>\r\n                  <div class='rightside'>\r\n                      <div class='competences'>\r\n                          <h1 id='titlepage'> Bureau Topographie & Geomatique</h1>\r\n                      </div>\r\n                      <img id='imgo' src={slide} alt=\"slide\" />\r\n                        <div id='map'>\r\n                            <div class=\"mapouter\"><div class=\"gmap_canvas\">\r\n                                <iframe width=\"100%\"\r\n                                      height=\"380\"\r\n                                      id=\"gmap_canvas\"\r\n                                      src=\"https://maps.google.com/maps?q=4054%20Avenue%20de%20Yasser%20Arafat%2C%20Hammam%20Sousse%2C%20Tunisie&t=&z=17&ie=UTF8&iwloc=&output=embed\"\r\n                                      frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" marginwidth=\"0\">\r\n                                </iframe>\r\n                            </div>\r\n                        </div>\r\n                      </div>\r\n                      <div class='form-contact'>\r\n                            <form onSubmit={this.envoie}>\r\n                                <div class='row'>\r\n                                    <label class= 'label-names' for=\"fname\">Nom</label>\r\n                                    <input class= 'input-names' type=\"text\" id=\"fname\" name=\"name\" placeholder=\"name\" value={this.state.name} onChange={this.handleChange}></input>\r\n                                </div>\r\n                                <div class='row'>\r\n                                  <label class= 'label-names' for=\"phone\" required>Phone</label>\r\n                                  <input class= 'input-names' type=\"tel\" id=\"phone\" name=\"phone\" placeholder=\"Votre numero de tel\" value={this.state.phone} onChange={this.handleChange}></input>\r\n                                </div>\r\n\r\n                                <div class='row'>\r\n                                  <label class= 'label-names' for=\"email\">email</label>\r\n                                  <input class= 'input-names' type=\"email\" id=\"email\" name=\"email\" placeholder=\"Votre email\" value={this.state.email} onChange={this.handleChange}></input>\r\n                                </div>\r\n\r\n                                <div class='row'>\r\n                                  <label class= 'label-names' for=\"text\">Text</label>\r\n                                  <textarea class=\"texto input-names\" id=\"msg\" name=\"message\"  data-msg=\"Please write something for us\" placeholder=\"Message\" value={this.state.message} onChange={this.handleChange}> </textarea>\r\n                                </div>\r\n\r\n                                <div class='row'>\r\n                                  <button class='submit' value=\"Envoyer\"> Envoyer </button>\r\n                                </div>\r\n                            </form>\r\n                      </div>\r\n                  </div>\r\n                  <div class='leftside'>\r\n\r\n                  </div>\r\n              </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\nexport default Nav;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Nav from './cmpts/nav.js'\n\n\nclass App extends React.Component {\n        render() {\n          return(\n            <Router>\n                <Switch>\n                      <Route exact path=\"/\"><Nav /></Route>\n                </Switch>\n              </Router>\n          );\n        }\n      }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}